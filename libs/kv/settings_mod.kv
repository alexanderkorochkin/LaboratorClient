<SettingSpacer>:
    size_hint_y: None
    height: 5
#    canvas:
#        Color:
#            rgb: .2, .2, .2, 0
#        Rectangle:
#            pos: self.x, self.center_y
#            size: self.width, 1

<-SettingItem>:
    size_hint: .25, None
    height: labellayout.texture_size[1] + dp(10)
    content: content
    canvas:
        Color:
            rgba: app.theme_cls.bg_light
        Rectangle:
            pos: self.x, self.y + 1
            size: self.size


    MDBoxLayout:
        pos: root.pos

        MDLabel:
            size_hint_x: .66
            id: labellayout
            markup: True
            text: u'{0}\n[size=13sp][color=999999]{1}[/color][/size]'.format(root.title or '', root.desc or '')
            font_size: '15sp'
            text_size: self.width - 32, None

        MDBoxLayout:
            id: content
            size_hint_x: .33


<SettingBoolean>:
    AnchorLayout:
        anchor_x: 'right'
        padding_x: dp(20)
        MDFlatButton:
            text_size: self.size
            markup: True
            halign: 'center'
            valign: 'center'
            text: "True" if root.value == "1" else "False"
            theme_text_color: "Custom"
            text_color: "green" if self.text == "True" else "red"
        Switch:
            text: 'Boolean'
            opacity: 0
            pos: root.pos
            active: bool(root.values.index(root.value)) if root.value in root.values else False
            on_active: root.value = root.values[int(args[1])]

<SettingString>:
    MDBoxLayout:
        padding: 0, 0, dp(20), 0
        MDLabel:
            text: root.value or ''
            pos: root.pos
            halign: "right"
            font_size: '15sp'

<SettingPath>:
    MDBoxLayout:
        padding: 0, 0, dp(20), 0
        MDLabel:
            text: "..." + str(root.value)[-20:] or ''
            pos: root.pos
            halign: "right"
            font_size: '15sp'

#:import kivy kivy
<SettingColor>:
    BoxLayout:
        Label:
            size_hint_x: None
            width: 44
            padding: (0, 5)
            canvas.before:
                # white border to see that there's a color tile at dark colors e.g. black
                Color:
                    rgba: (1,1,1,1.)
                Line:
                    rectangle: self.x,self.y,self.width,self.height
                Color:
                    rgba: kivy.utils.get_color_from_hex(root.value) if root.value else (1,1,1,1.)
                Rectangle:
                    pos: self.pos
                    size: self.size

        MDLabel:
            text: root.value or ''
            pos: root.pos
            font_size: '15sp'
            text_size: self.size
            valign: 'middle'
            halign: 'right'
            padding: (5,0)

<SettingOptions>:
    MDBoxLayout:
        padding: 0, 0, dp(20), 0
        MDLabel:
            text: root.value or ''
            pos: root.pos
            halign: "right"
            font_size: '15sp'

<SettingTitle>:
    text_size: self.width - 32, None
    size_hint_y: None
    height: max(dp(20), self.texture_size[1] + dp(20))
    font_size: '15sp'
#    canvas.before:
#        Color:
#            rgba: app.theme_cls.primary_color
#        Rectangle:
#            pos: self.pos
#            size: self.size


<SettingSidebarLabel>:
    size_hint: 1, None
    text_size: self.width - 32, None
    height: self.texture_size[1] + dp(20)
    font_size: '15sp'
#    canvas.before:
#        Color:
#            rgba: 47 / 255., 167 / 255., 212 / 255., int(self.selected)
#        Rectangle:
#            pos: self.pos
#            size: self.size

<-SettingsPanel>:
    spacing: 5
    padding: [dp((Window.width - Window.height) / 2) + dp(5), dp(5), dp((Window.width - Window.height) / 2) + dp(5), dp(5)] if Window.width > Window.height else [dp(5), dp(5), dp(5), dp(5)]
#    size_hint_x: None
#    width: min(Window.width, dp(1080))
#    pos_hint_x: None
#    x: dp(100)
    size_hint_y: None
    height: self.minimum_height

    MDLabel:
        size_hint_y: None
        text: root.title
        halign: 'center'
        text_size: self.width - 32, None
        height: max(50, self.texture_size[1] + 20)
        color: app.theme_cls.text_color
        font_size: '20sp'

#        canvas.after:
#            Color:
#                rgb: app.theme_cls.bg_normal
#            Rectangle:
#                pos: self.x, self.y - 2
#                size: self.width, 1

<-Settings>:
    orientation: 'horizontal'
    canvas:
        Color:
            rgb: app.theme_cls.bg_normal
        Rectangle:
            pos: self.pos
            size: self.size

<-InterfaceWithSidebar>:
    orientation: 'horizontal'
    menu: menu
    content: content
    MenuSidebar:
        id: menu
    ContentPanel:
        id: content
        current_uid: menu.selected_uid

<-InterfaceWithSpinner>:
    orientation: 'vertical'
    menu: menu
    content: content
    MenuSpinner:
        id: menu
    ContentPanel:
        id: content
        current_uid: menu.selected_uid

<-MenuSpinner>:
    orientation: 'horizontal'
    size_hint_y: None
    height: '50dp'
    spinner: spinner
    spinner_text: spinner.text
    close_button: button
    Spinner:
        id: spinner
    MDFlatButton:
        text: 'Close'
        id: button
        size_hint_x: None
        width: min(dp(200), 0.4*root.width)
        font_size: '15sp'


<MenuSidebar>:
    size_hint_x: None
    width: '200dp'
    buttons_layout: menu
    close_button: button
    GridLayout:
        pos: root.pos
        cols: 1
        id: menu
        padding: 5

#        canvas.after:
#            Color:
#                rgb: .2, .2, .2
#            Rectangle:
#                pos: self.right - 1, self.y
#                size: 1, self.height

    Button:
        text: 'Close'
        id: button
        size_hint: None, None
        width: root.width - dp(20)
        height: max(50, self.texture_size[1] + dp(20))
        pos: root.x + dp(10), root.y + dp(10)
        font_size: '15sp'

<ContentPanel>:
    do_scroll_x: False
    container: content
    GridLayout:
        id: content
        cols: 1
        size_hint_y: None
        height: self.minimum_height

<InterfaceWithTabbedPanel>:
    tabbedpanel: tp
    close_button: button
    TabbedPanel:
        id: tp
        size: root.size
        pos: root.pos
        #do_default_tab: False
        background_color: (0,0,0,1)
    Button:
        id: button
        text: 'Close'
        size_hint: None, None
        height: '45dp'
        width: min(dp(200), 0.3*root.width)
        x: root.x + root.width - self.width
        y: root.y + root.height - self.height

<ScrollView>:
    _handle_y_pos: (self.right - self.bar_width - self.bar_margin) if self.bar_pos_y == 'right' else (self.x + self.bar_margin), self.y + self.height * self.vbar[0]
    _handle_y_size: min(self.bar_width, self.width), self.height * self.vbar[1]
    _handle_x_pos: self.x + self.width * self.hbar[0], (self.y + self.bar_margin) if self.bar_pos_x == 'bottom' else (self.top - self.bar_margin - self.bar_width)
    _handle_x_size: self.width * self.hbar[1], min(self.bar_width, self.height)
#    canvas.after:
#        Color:
#            rgba: self._bar_color if (self.do_scroll_y and self.viewport_size[1] > self.height) else [0, 0, 0, 0]
#        Rectangle:
#            pos: root._handle_y_pos or (0, 0)
#            size: root._handle_y_size or (0, 0)
#        Color:
#            rgba: self._bar_color if (self.do_scroll_x and self.viewport_size[0] > self.width) else [0, 0, 0, 0]
#        Rectangle:
#            pos: root._handle_x_pos or (0, 0)
#            size: root._handle_x_size or (0, 0)